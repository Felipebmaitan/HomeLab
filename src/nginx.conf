user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    # Upstreams for internal services
    upstream mempool {
        server mempool-frontend:8080;
    }
    upstream jellyfin {
        server jellyfin:8096;
    }
    upstream jackett {
        server jackett:9117;
    }
    upstream qbittorrent {
        server qbittorrent:8080;
    }
    upstream radarr {
        server radarr:7878;
    }
    upstream sonarr {
        server sonarr:8989;
    }

    # Server blocks
    server {
        listen 80;
        server_name _;

        # ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect to HTTPS by default
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name _;

        ssl_certificate /etc/letsencrypt/live/_/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/_/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Mempool UI (frontend)
        location /mempool/ {
            proxy_pass http://mempool/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Prefix /mempool;
            rewrite ^/mempool/(.*) /$1 break;
        }

        # Jellyfin
        location /jellyfin/ {
            proxy_pass http://jellyfin/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 36000s;
            proxy_send_timeout 36000s;
            proxy_buffering off;
        }

        # Jackett
        location ^~ /jackett {
            proxy_pass http://jackett;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
        
        # Allow the API External Access via NGINX
        location ^~ /jackett/api {
            auth_basic off;
            proxy_pass http://jackett;
        }

        # qBittorrent WebUI
        location /qbittorrent/ {
            proxy_pass http://qbittorrent/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Radarr
        location ^~ /radarr {
            proxy_pass http://radarr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
        
        # Allow the API External Access via NGINX
        location ^~ /radarr/api {
            auth_basic off;
            proxy_pass http://radarr;
        }

        # Sonarr
        location ^~ /sonarr {
            proxy_pass http://sonarr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
        
        # Allow the API External Access via NGINX
        location ^~ /sonarr/api {
            auth_basic off;
            proxy_pass http://sonarr;
        }
    }
}

# TCP stream for Electrum (Fulcrum) SSL on port 50002
# This terminates TLS at Nginx using your Let's Encrypt cert and proxies plain TCP to Fulcrum (50001)
# Adjust the certificate path to match your domain/cert location (wildcard certs are typically under /etc/letsencrypt/live/mydomain.com)
stream {
    upstream electrum_tcp {
        # Fulcrum listens on 50001 (TCP, non-TLS) and 50002 (TLS). We terminate TLS here and forward to 50001.
        server fulcrum:50001;
    }

    server {
        # Electrum SSL default port
        listen 50002 ssl;

        proxy_connect_timeout 10s;
        proxy_timeout 1h;
        proxy_pass electrum_tcp;

        # TLS settings for Electrum clients
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # IMPORTANT: point these to your actual certificate files
        # Here we target the dedicated subdomain bitcoin.[yourdomain].[com]
        ssl_certificate /etc/letsencrypt/live/bitcoin._DOMAIN_/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/bitcoin._DOMAIN_/privkey.pem;
    }
}